name: Release

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker-compose version

      - name: Extract Release Information
        id: release_info
        run: |
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ github.event.release.name }}" >> $GITHUB_ENV
          echo "RELEASE_BODY=${{ github.event.release.body }}" >> $GITHUB_ENV

      - name: Build Docker Image with Docker Compose
        run: |
          docker-compose -f docker-compose.yml build --no-cache \
            --build-arg TAG=${{ env.RELEASE_TAG }} app

      - name: Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag your-app your-dockerhub-username/your-app:${{ env.RELEASE_TAG }}
          docker push your-dockerhub-username/your-app:${{ env.RELEASE_TAG }}

      - name: Update Release Notes with Docker Image Info
        uses: actions/github-script@v6
        with:
          script: |
            const { tag_name, html_url } = context.payload.release;
            const dockerImageInfo = `Docker image: \`your-dockerhub-username/your-app:${tag_name}\``;
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `${context.payload.release.body || ""}\n\n${dockerImageInfo}`
            });