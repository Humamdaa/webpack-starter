name: Release

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for semantic versioning tools)
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Semantic Release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/github @semantic-release/git

      - name: Run Semantic Release
        id: semantic_versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release
        continue-on-error: true

      - name: Extract Semantic Version
        if: steps.semantic_versioning.outcome == 'success'
        id: extract_version
        run: |
          echo "RELEASE_TAG=$(cat .version)" >> $GITHUB_ENV

      - name: Build Docker Image with Docker Compose
        if: env.RELEASE_TAG != ''
        run: |
          docker-compose -f docker-compose.yml build --no-cache \
            --build-arg TAG=${{ env.RELEASE_TAG }} app

      - name: Push Docker Image
        if: env.RELEASE_TAG != ''
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag your-app your-dockerhub-username/your-app:${{ env.RELEASE_TAG }}
          docker push your-dockerhub-username/your-app:${{ env.RELEASE_TAG }}

      - name: Update Release Notes with Docker Image Info
        if: env.RELEASE_TAG != ''
        uses: actions/github-script@v6
        with:
          script: |
            const releaseTag = process.env.RELEASE_TAG;
            const dockerImageInfo = `Docker image: \`your-dockerhub-username/your-app:${releaseTag}\``;
            const releaseId = context.payload.release.id;
            const releaseBody = context.payload.release.body || '';
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: `${releaseBody}\n\n${dockerImageInfo}`,
            });